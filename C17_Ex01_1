using System;

namespace C17_Ex01_1
{
    
    class Program
    {
        public const int k_NumberOfUserInputs = 4;
        public const int k_NumberOfDigits = 4;

        private enum eOrder { NONE, ASC, DESC };
    

        public static void Main()
        {
            int io_bineryNumbersLengthSum = 0;
            int io_counterOfAscendingNums = 0;
            int io_counterOfDescendingNums = 0;
            int io_numbersSum = 0;
            int interactionsCounter = 1;

            Console.WriteLine("Please enter {0} numbers with {1} digits each: \n", k_NumberOfUserInputs, k_NumberOfDigits);

            while (interactionsCounter <= k_NumberOfUserInputs)
            {
                int numberFromUser;

                Console.Write("Number {0}: ", interactionsCounter);
                string numberUserInput = Console.ReadLine();

                if (string.IsNullOrEmpty(numberUserInput) || numberUserInput.Length != 4 || !int.TryParse(numberUserInput, out numberFromUser))
                {
                    Console.WriteLine("invalid input, please try again!");
                    continue;
                }

                string numberInBinary = DecimalToBinary(numberFromUser);
                io_bineryNumbersLengthSum += numberInBinary.Length;

                Console.WriteLine("Number {0} in binary: {1}, len: {2}, total len: {3}", interactionsCounter, numberInBinary, numberInBinary.Length, io_bineryNumbersLengthSum);

                eOrder eNumOrder = CheckAscendingOrDescendingNumber(numberFromUser);

                //int isNumAscendingOrDescending = CheckAscendingOrDescendingNumber(numberFromUser);
                if (eNumOrder == eOrder.ASC)
                {
                    io_counterOfAscendingNums++;
                }
                else if (eNumOrder == eOrder.DESC)
                {
                    io_counterOfDescendingNums++;
                }

                io_numbersSum += numberFromUser;
                interactionsCounter++;

            }

            Console.WriteLine("===============================================");
            Console.Write("interactionsCounter: {0}, io_numbersSum: {1}", (interactionsCounter - 1) , io_numbersSum);

            float avgOfBinaryNumLengths = (float)io_bineryNumbersLengthSum / k_NumberOfUserInputs;
            float avgOfNumbers = (float)io_numbersSum / k_NumberOfUserInputs;

            Console.WriteLine("The avarage of binary numbers lengths is {0}", avgOfBinaryNumLengths);
            Console.WriteLine("There are {0} numbers which are ascending series and {1} which are descending",
                io_counterOfAscendingNums, io_counterOfDescendingNums);
            Console.WriteLine("The avarage of numbers inserted is {0}", avgOfNumbers);

            Console.ReadLine();
        }

        private static eOrder CheckAscendingOrDescendingNumber(int i_numberToCheck)
        {
            int isAscending = 0;
            int isDescending = 0;
            int digitSaved = i_numberToCheck % 10;

            if (i_numberToCheck / 10 == 0)
            {
                i_numberToCheck = 0;
            }
            while (i_numberToCheck > 0)
            {
                i_numberToCheck /= 10;

                if (digitSaved > i_numberToCheck % 10)
                {
                    isAscending++;
                }
                else if (digitSaved < i_numberToCheck % 10)
                {
                    isDescending++;
                }
                digitSaved = i_numberToCheck % 10;
                if (i_numberToCheck < 10)
                {
                    break;
                }
            }
            if (isAscending > 0 && isDescending == 0)
            {
                return eOrder.ASC;
            }
            if (isDescending > 0 && isAscending == 0)
            {
                return eOrder.DESC;
            }

            return eOrder.NONE;
            //return 0;
        }

        public static string DecimalToBinary(int i_numberToConvert)
        {
            string result = string.Empty;
            while (i_numberToConvert > 0)
            {
                int remainder = i_numberToConvert % 2;
                i_numberToConvert /= 2;
                result = remainder.ToString() + result;
            }
            return result;
        }
    }
}
